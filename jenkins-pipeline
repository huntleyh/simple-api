import groovy.json.JsonSlurper

def getFtpPublishProfile(def publishProfilesJson) {
  def pubProfiles = new JsonSlurper().parseText(publishProfilesJson)
  for (p in pubProfiles)
    if (p['publishMethod'] == 'FTP')
      return [url: p.publishUrl, username: p.userName, password: p.userPWD]
}

node {
  def msbuildHome = tool name: 'msbuild22'
  
  withEnv(['AZURE_SUBSCRIPTION_ID=32d270c8-50d1-4fec-8afe-85bd670e83ba',
        'AZURE_TENANT_ID=16ce3176-726f-4505-a3fe-1b8ae984c4ad',
        "PATH+MSBUILD=${msbuildHome}"]) {
    stage('Checkout git repo') {
        git branch: 'main', url: params.git_repo
    }
  
    stage('Restore NuGet packages') {
        bat(script: "nuget.exe restore simple-api.sln", returnStdout: true)
    }

    stage('build and publish') {
        bat(script: "\"${msbuildHome}\\msbuild.exe\" simple-api.sln /p:DeployOnBuild=true /p:WebPublishMethod=FileSystem /p:PublishDir=./publish", returnStdout: true)
    }

    stage('Login to Azure') {
        withCredentials([usernamePassword(credentialsId: 'azure-service-principal', passwordVariable: 'AZURE_CLIENT_SECRET', usernameVariable: 'AZURE_CLIENT_ID')]) {
            bat """
                az login --service-principal -u %AZURE_CLIENT_ID% -p %AZURE_CLIENT_SECRET% -t %AZURE_TENANT_ID%
                az account set -s %AZURE_SUBSCRIPTION_ID%
            """
        }
    }

    stage('Parse and Update Environment Variables') {
        // PowerShell script to parse XML and update environment variables
        powershell '''
            $resourceGroup = "hhdotnetsampleapp_group"
            $webAppName = "hhdotnetsampleapp"
            $xmlFilePath = "./env_config_file.xml"
            $xmlContent = [xml](Get-Content $xmlFilePath)
            
            foreach ($variable in $xmlContent.EnvironmentVariables.Variable) {
                $name = $variable.VariableName
                $value = $variable.VariableValue
                Write-Host "Updating environment variable: $name with value: $value"
                az webapp config appsettings set --name "$webAppName" --resource-group "$resourceGroup" --settings "$name=$value"
            }
        '''
    }

    stage('Create ZIP Package') {
        bat """
            powershell Compress-Archive -Path ./publish/* -DestinationPath ${zipFilePath} -Force
        """
    }

    stage('Deploy Using ZIP') {
        def resourceGroup = 'hhdotnetsampleapp_group'
        def webAppName = 'hhdotnetsampleapp'

        bat """
            az webapp deployment source config-zip --resource-group "${resourceGroup}" --name "${webAppName}" --src "${zipFilePath}"
        """
    }
  }
}
