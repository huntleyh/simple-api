import groovy.json.JsonSlurper

def getFtpPublishProfile(def publishProfilesJson) {
  def pubProfiles = new JsonSlurper().parseText(publishProfilesJson)
  for (p in pubProfiles)
    if (p['publishMethod'] == 'FTP')
      return [url: p.publishUrl, username: p.userName, password: p.userPWD]
}

node {
  def msbuildHome = tool name: 'msbuild22'
  def buildOutputDir = './publish'
  def zipFilePath = './output.zip'
  def solutionFile = 'simple-api.sln'
  def resourceGroup = "hhdotnetsampleapp_group"
  def webAppName = "hhdotnetsampleapp"
            
  withEnv(['AZURE_SUBSCRIPTION_ID=32d270c8-50d1-4fec-8afe-85bd670e83ba',
        'AZURE_TENANT_ID=16ce3176-726f-4505-a3fe-1b8ae984c4ad',
        "PATH+MSBUILD=${msbuildHome}"]) {
    stage('Checkout git repo') {
        git branch: 'main', url: params.git_repo
    }
  
    stage('Restore NuGet packages') {
        bat(script: "nuget.exe restore simple-api.sln", returnStdout: true)
    }

    stage('Build') {
        powershell """
            # Ensure the output directory exists
            \$outputDir = '${buildOutputDir}'
            if (-Not (Test-Path -Path \$outputDir)) {
                New-Item -ItemType Directory -Path \$outputDir | Out-Null
            }

            # Path to the solution file
            \$solutionFile = '${solutionFile}'

            # Run msbuild to build the project
            Write-Host "Building the project using msbuild..."
            msbuild.exe \$solutionFile /p:Configuration=Release /p:OutDir=\$outputDir /p:DeployOnBuild=true /p:WebPublishMethod=FileSystem
        """
    }
/*
    stage('build and publish') {
        bat(script: "\"${msbuildHome}\\msbuild.exe\" simple-api.sln /p:DeployOnBuild=true /p:WebPublishMethod=FileSystem /p:PublishDir=./publish", returnStdout: true)
    }
*/
    stage('Login to Azure') {
        withCredentials([usernamePassword(credentialsId: 'azure-service-principal', passwordVariable: 'AZURE_CLIENT_SECRET', usernameVariable: 'AZURE_CLIENT_ID')]) {
            bat """
                az login --service-principal -u %AZURE_CLIENT_ID% -p %AZURE_CLIENT_SECRET% -t %AZURE_TENANT_ID%
                az account set -s %AZURE_SUBSCRIPTION_ID%
            """
        }
    }

    stage('Parse and Update Environment Variables') {
        // PowerShell script to parse XML and update environment variables
        powershell '''
            \$webAppName = '${webAppName}'
            \$resourceGroup = '${resourceGroup}'
            $xmlFilePath = "./env_config_file.xml"
            $xmlContent = [xml](Get-Content $xmlFilePath)
            
            foreach ($variable in $xmlContent.EnvironmentVariables.Variable) {
                $name = $variable.VariableName
                $value = $variable.VariableValue
                Write-Host "Updating environment variable: $name with value: $value"
                az webapp config appsettings set --name \$webAppName --resource-group \$resourceGroup --settings "$name=$value"
            }
        '''
    }

    stage('Create and Deploy ZIP Package') {
        powershell '''
            \$webAppName = '${webAppName}'
            \$resourceGroup = '${resourceGroup}'
            \$outputDir = '${buildOutputDir}/*'
            \$zipFilePath = '${zipFilePath}'

            Compress-Archive -Path "\$outputDir' -DestinationPath '\$zipFilePath' -Force
            az webapp deploy --resource-group \$resourceGroup --name \$webAppName --src-path '\$zipFilePath'
        '''
    }
  }
}
